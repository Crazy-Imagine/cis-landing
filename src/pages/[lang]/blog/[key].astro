---
import { Image } from 'astro:assets';
import Layout from '@/layouts/Layout.astro';
import ResponsiveContainer from '@/components/ResponsiveContainer.astro';
import Typography from '@/components/Typography.astro';
import fetchApi from '@/lib/strapi';
import type { ArticleAttributes, ArticleCollection } from '@/types/strapi/Article';

export async function getStaticPaths() {
  const enArticlesPromise = fetchApi<ArticleCollection>({
    endpoint: 'articles',
    params: {
      locale: 'en',
      fields: ['title', 'description', 'content', 'Key', 'locale'],
      populate: {
        category: {
          fields: ['name'],
        },
        author: {
          fields: ['name'],
        },
        image: {
          fields: ['url', 'width', 'height', 'formats'],
        },
      },
      filters: {
        status: {
          $sq: 'published',
        },
      },
      sort: {
        createdAt: 'desc',
      },
    },
  });
  const esArticlesPromise = fetchApi<ArticleCollection>({
    endpoint: 'articles',
    params: {
      locale: 'es',
      fields: ['title', 'description', 'content', 'Key', 'locale'],
      populate: {
        category: {
          fields: ['name'],
        },
        author: {
          fields: ['name'],
        },
        image: {
          fields: ['url', 'width', 'height', 'formats'],
        },
      },
      filters: {
        status: {
          $sq: 'published',
        },
      },
      sort: {
        createdAt: 'desc',
      },
    },
  });

  const [enArticles, esArticles] = await Promise.all([enArticlesPromise, esArticlesPromise]);

  return [...enArticles.data, ...esArticles.data].map(({ attributes }) => ({
    params: { lang: attributes.locale, key: attributes.Key },
    props: { attributes },
  }));
}

interface Props {
  attributes: ArticleAttributes;
}

const { attributes } = Astro.props;

const {
  category: {
    data: { attributes: category },
  },
  author: {
    data: { attributes: author },
  },
  image: {
    data: [image], // TODO: Image must return alt text
  },
  ...article
} = attributes;
---

<Layout>
  <ResponsiveContainer>
    <div class="mb-12">
      <Typography
        as="span"
        variant="caption"
        class="rounded-md bg-primary px-5 py-3.5 uppercase text-white"
      >
        {category.name}
      </Typography>
    </div>

    <Typography as="h1" variant="blogTitle" class="text-primary">{article.title}</Typography>

    <Typography as="p" variant="caption" class="my-10 border-l-2 border-primary pl-5 text-primary">
      {author.name}
    </Typography>

    <Typography as="p" variant="paragraph1" class="text-grayish">
      {article.description}
    </Typography>
  </ResponsiveContainer>

  <Image
    src={image.attributes.url}
    alt={article.title}
    width={image.attributes.width}
    height={image.attributes.height}
  />

  <ResponsiveContainer />
</Layout>

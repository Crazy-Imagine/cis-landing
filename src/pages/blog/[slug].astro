---
import { Image } from 'astro:assets';
import BlogContent from '@/sections/Blog/Content.astro';
import BlogTitle from '@/sections/Blog/Title.astro';
import Layout from '@/layouts/Layout.astro';
import ResponsiveContainer from '@/components/ResponsiveContainer.astro';
import fetchApi from '@/lib/strapi';
import type { ArticleAttributes, ArticleCollection } from '@/types/strapi/Article';
import { getImageUrl } from '@/utils/imageUrl';

export async function getStaticPaths() {
  const articleCollection = await fetchApi<ArticleCollection>({
    endpoint: 'articles',
    params: {
      locale: 'en',
      fields: ['title', 'description', 'content', 'slug', 'Key'],
      publicationState: 'live',
      populate: {
        // TODO: add seo after seo tags are added on production
        // seo: true,
        category: {
          fields: ['name'],
        },
        author: {
          fields: ['name'],
        },
        image: {
          fields: ['url', 'width', 'height', 'formats', 'alternativeText'],
        },
        contentImage: {
          fields: ['url', 'width', 'height', 'formats', 'alternativeText'],
        },
      },
      sort: {
        createdAt: 'desc',
      },
    },
  });

  const esArticleCollection = await fetchApi<ArticleCollection>({
    endpoint: 'articles',
    params: {
      locale: 'es',
      fields: ['slug', 'Key'],
      publicationState: 'live',
      sort: {
        createdAt: 'desc',
      },
    },
  });

  return articleCollection.data.map(({ attributes, id }) => ({
    params: { slug: attributes.slug },
    props: {
      id,
      attributes,
      hrefLangSlug: esArticleCollection.data.find(
        (article) => article.attributes.Key === attributes.Key
      )?.attributes.slug,
    },
  }));
}

interface Props {
  id: number;
  attributes: ArticleAttributes;
  hrefLangSlug: string;
}

const { attributes, id, hrefLangSlug } = Astro.props as Props;

const { contentImage, image, ...article } = attributes;
const imageToRender = contentImage.data ?? image.data;
---

<Layout
  seo={{
    metaTitle: article.title,
    metaDescription: article.description,
  }}
  image={imageToRender.attributes.formats.small.url}
  hrefLangPathname={`/es/blog/${hrefLangSlug}`}
>
  <BlogTitle
    author={article.author.data.attributes.name}
    category={article.category.data.attributes.name}
    description={article.description}
    title={article.title}
  />

  <ResponsiveContainer containerClass="!py-0">
    <Image
      transition:name={`${article.title}-image`}
      src={getImageUrl(imageToRender.attributes.url)}
      alt={imageToRender.attributes.alternativeText ?? article.title}
      width={imageToRender.attributes.width}
      height={imageToRender.attributes.height}
      class="mx-auto"
    />
  </ResponsiveContainer>

  <BlogContent id={id} content={article.content} />
</Layout>

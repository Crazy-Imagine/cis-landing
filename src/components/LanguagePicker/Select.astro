---
import { langFlags, languages } from '@/i18n/ui';
import { getLangFromUrl } from '@/i18n/utils';

const lang = getLangFromUrl(Astro.url);

const { id } = Astro.props;
---

<astro-language-picker data-id={id}>
  <label class={Astro.props.class}>
    <select
      id={`language-picker-${id}`}
      class="border-none bg-transparent font-nexaLight uppercase text-white"
    >
      {
        Object.keys(languages).map((langCode) => (
          <option
            value={langCode}
            selected={lang === langCode}
            class="flex items-center bg-transparent"
          >
            {langCode.toUpperCase()}
            {langFlags[langCode as 'en' | 'es']}
          </option>
        ))
      }
    </select>
  </label>
</astro-language-picker>

<script>
  class AstroLanguagePicker extends HTMLElement {
    constructor() {
      super();
      const id = this.dataset.id;
      const select = this.querySelector(`#language-picker-${id}`);

      if (!select) return;

      select.addEventListener('change', (event) => {
        const lang = (event.target as any).value;
        const url = window.location.pathname;

        if (url.startsWith('/es') && lang === 'es') return;

        if (!url.startsWith('/es') && lang === 'en') return;

        const toChange = url.startsWith('/es') ? 'en' : 'es';

        const hrefLangElement = document.querySelector(`link[hreflang="${toChange}"]`);
        if (!hrefLangElement) return;

        const href = hrefLangElement.getAttribute('href');
        if (!href) return;

        window.location.href = href;
      });
    }
  }

  customElements.define('astro-language-picker', AstroLanguagePicker);
</script>
